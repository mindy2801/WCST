meanPar <- colSums(parstack[,,5]);
meanPar
##Table.3.2
control <- parstack[1:39,,5]
SDI <- colMeans(parstack[40:88,,5])
control
?colSums
pars_summary <- cbind(parstack[,,5],as.factor(c(rep("SDI", 39),rep("Control", 88))))
pars_summary <- cbind(parstack[,,5],as.factor(c(rep("SDI", 39),rep("Control", 49))))
pars_summary
pars_summary <- cbind(parstack[,,5],group=as.factor(c(rep("SDI", 39),rep("Control", 49))))
pars_summary$group
pars_summary[,"group"]
pars_summary <- cbind(parstack[,,5],group=c(rep("SDI", 39),rep("Control", 49)))
pars_summary
pars_summary <- cbind(parstack[,,5],group=as.factor(c(rep("SDI", 39),rep("Control", 49))))
str(pars_summary)
dimnmaes(pars_summary)
dimnames(pars_summary)
pars_summary[,5]
levels(pars_summary[,5])
pars_summary <- cbind(parstack[,,5],group=as.factor(c(rep(1, 39),rep(2, 49))))
levels(pars_summary[,5])
levels(pars_summary[,"group"])
class(pars_summary[,5])
pars_summary[,5]
as.factor(pars_summary[,5])
class(pars_summary)
levels(pars_summary[,"group"])
factor(c(rep(1, 39),rep(2, 49))
)
pars_summary <- cbind(parstack[,,5],group=factor(c(rep(1, 39),rep(2, 49))))
pars_summary
pars_summary[,5]
?aggregate
?tapply
?sapply
?lapply
##Table.3.1
aggregate(.~group, data=pars_summary, FUN=sum)
##Table.3.1
aggregate(.~group, data=as.data.frame(pars_summary), FUN=sum)
##Table.3.1
meanPars <- aggregate(.~group, data=as.data.frame(pars_summary), FUN=sum)
meanPars
gname <- c("SDI", "Control")
colnames[meanPars[,1]]
colnames(meanPars[,1])
colnames(meanPars[,1]) <- gname
meanPars[,1] <- gname
menaPars
meanPars
pars_summary
median(c(1,3,4))
stderr(c(1,3,4))
sd(c(1,3,4))
medPars <- aggregate(.~group, data=as.data.frame(pars_summary), FUN=median)
sdPars <- aggregate(.~group, data=as.data.frame(pars_summary), FUN=sd)
medPars
pars_summary <- rbind(meanPars, medPars, sdPars)
pars_summary
meanPars[,1] <- rep(gname,3)
gname
pars_summary[,1] <- rep(gname,3)
pars_summary
pars_summary[,1] <- factor(rep(gname,3))
pars_summary
pars_summary[,1]
library(knitr)
library(kableExtra)
kable(pars_summary, format = "html",caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2)
kable(pars_summary, format = "html",caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2)
pars_summary
##Table 3
meanPars <- aggregate(.~group, data=as.data.frame(pars_summary), FUN=mean)
pars_summary <- rbind(meanPars, medPars, sdPars)
pars_summary
pars_summary <- rbind(meanPars, medPars, sdPars)
pars_summary[,1] <- factor(rep(gname,3))
kable(pars_summary, format = "html",caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,2) %>% group_rows("Standard deviation", 5,2)
kable(pars_summary, format = "html",caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
pars_summary
pars_rpd1 <- cbind(parstack[,,5],group=factor(c(rep(1, 39),rep(2, 49))))
gname <- c("SDI", "Control")
##Table 3
meanPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=mean)
medPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=median)
sdPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=sd)
pars_summary <- rbind(meanPars, medPars, sdPars)
pars_summary[,1] <- factor(rep(gname,3))
pars_summary
kable(pars_summary, format = "html",caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
?kable
kable(pars_summary, format = "html",, col.names = ("", "r", "p", "d", "i")caption = "Table 3", align="l") %>%
kable(pars_summary, format = "html",col.names = ("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
pars_summary
round(pars_summary)
round(pars_summary[,2:5])
round(meanPars,3)
round(meanPars,2)
pars_summary <- rbind(round(meanPars,2), round(medPars,2), round(sdPars,2))
pars_summary[,1] <- factor(rep(gname,3))
pars_summary
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3 \n Mean", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
?sort
?order
?sort
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3 \n\ Mean", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3 \n\n Mean", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
pars_summary
pars_summary[c(2,1,4,3,6,5)]
pars_summary[c(2,1,4,3,6,5),]
pars_summary <- pars_summary[c(2,1,4,3,6,5),]
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
pars_summary
menaPars
meanPars
pras_rpdi
pras_rpd1
pars_rpd1
pars_rpd1 <- pars_rpd1[c(40:88,1:39),]
pars_rpd1
gname <- c("Control", "SDI")
##Table 3
meanPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=mean)
medPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=median)
sdPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=sd)
pars_summary <- rbind(round(meanPars,2), round(medPars,2), round(sdPars,2))
pars_summary[,1] <- factor(rep(gname,3))
pasr_summary
pars_summary
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
meanPars
pars_rdp1
pars_rpd1
pars_rpd1 <- cbind(parstack[,,5],group=factor(c(rep(1, 39),rep(2, 49))))
pars_rpd1
##Table 3
meanPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=mean)
menaPars
meanPars
pars_rpd1 <- pars_rpd1[c(40:88,1:39),]
pars_rpd1
##Table 3
meanPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=mean)
meanPars
as.data.frame(pars_rpd1)
rm(list=ls())
load("rpd1_Code17b_choice_s1-88_iter100.Rdata")
pars_rpd1 <- cbind(parstack[,,5],group=factor(c(rep(1, 39),rep(2, 49))))
pars_rpd1
pars_rpd1 <- pars_rpd1[c(40:88,1:39),]
pars_rpd1[1,]
pars_rpd1[2,]
pars_rpd1[88,]
pars_rpd1
pars_rpd1 <- cbind(parstack[,,5],group=factor(c(rep(2, 39),rep(1, 49))))
pars_rpd1 <- pars_rpd1[c(40:88,1:39),]
gname <- c("Control", "SDI")
pars_rpd1
##Table 3
meanPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=mean)
meanPars
medPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=median)
sdPars <- aggregate(.~group, data=as.data.frame(pars_rpd1), FUN=sd)
pars_summary <- rbind(round(meanPars,2), round(medPars,2), round(sdPars,2))
pars_summary[,1] <- factor(rep(gname,3))
pars_summary
View(sdPars)
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
?ttest
?t.test
t.test(pars_rpd1[1:49,],pars_rpd1[50:88,])
t.test(pars_rpd1[1:49,2],pars_rpd1[50:88,2])
pars_rpd1[50:88,2]
t.test(pars_rpd1[1:49,1],pars_rpd1[50:88,1])
t.test(pars_rpd1[1:49,3],pars_rpd1[50:88,3])
t.test(pars_rpd1[1:49,2],pars_rpd1[50:88,2])
kable(pars_summary, format = "html",col.names = c("", "r", "p", "d", "i"), caption = "Table 3", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 4)) %>%
group_rows("Mean", 1,2) %>% group_rows("Median",3,4) %>% group_rows("Standard deviation", 5,6)
2LLstack <- array(NA, c(maxsubj, maxiter, 1))
rawdatamat
matchstack=array(rep(0,(3*4*128)),dim=c(3,4,128))
matchstack
correctdeckmat=read.table("correctdeck matrix.txt",header=1)
head(correctdeckmat)
for (i in 1:4) matchstack[,i,] <- array(as.numeric(correctdeckmat[,]==i),dim=c(3,128))
matchstack
matchstack[,,1]
c(1/3,1/3,1/3)%*%matchstack[,,1]
cattpredp <- matrix(NA, ncol=128, nrow=4)
for(trial in 1:128){
cattpredp[,trial]=t(c(1/3,1/3,1/3)%*%matchstack[,,trial])
}
cattpredp
freeletters
freeletters <- c("r", "i")
freeletters
a <- "r"
a
a in freeletters
a %in% freeletters
freeletters <- c("r", "p", "d")
c("r","p") %in% freeletters
c("r","d") %in% freeletters
c("r","i") %in% freeletters
match(a,freeletters)
match(c("r", "i"),freeletters)
for(letter in freeletters){}
for(letter in freeletters){
a <- c(a, letter}
for(letter in freeletters){
a <- c(a, letter)
}
a
"a"
"a" <- 1
"a"
a
"b"
"b" <- 10
"b"
b
#Calculate deck-probability(4) under 24 models
#temppars = c(r,p,d,i)
#freeletters = c("i")... a vector of characters in any order for the free parameter letters
#fixedvals = an ordered vector numbers that only matters for nonfree parameters
#pequalsr = T/F for whether constraint p=r is true
tpar <- c("r","p","d","i")
match("r",tpar)
#For baseline model
rm(list=ls(all=TRUE))
source("probability.R")
datname="WCST Sample data.txt"
rawdatamat=read.table(datname,encoding="UTF-8")
subjlabels=rawdatamat[,257]				#reads extra information in datafile if available
subjgroup= rawdatamat[,258]
maxiter <- 5
maxiter <- 10
maxsubj <- nrow[rawdatamat]
rawdatamat
maxsubj <- nrow(rawdatamat)
maxsubj
parbounds=c(0,0,.01,.01,1,1,5,5)  #boundaries for r, p, d, i
lb=parbounds[1:4]
ub=parbounds[5:8]
twoLLstack <- array(NA, c(maxsubj, 1, 1))
parstack <- array(NA, c(maxsubj, 4, 1))
twoLLstack
parstack
temppars <- runif(4)*ub
temppars
freeparsmat=matrix(nrow=24,ncol=4,dimnames=list(NULL,c("r","p","d","i")))  #setting up a matrix that lists the free pars of each of 24 models
fixedvalsmat=matrix(-1,nrow=24,ncol=4,dimnames=list(NULL,c("r","p","d","i"))) #parameter constraint values of 24 models
pequalsrmat=matrix(0,nrow=24,ncol=1)
for (ploop in 0:1) for (dloop in 0:1) for (iloop in 0:2) for (rloop in 0:1)
{
rowloop=ploop*12 + dloop*6 + iloop*2 + rloop +1
freeparsmat[rowloop,1]=(if(rloop==0) "r" else "")
freeparsmat[rowloop,2]=(if(ploop==0) "p" else "")
freeparsmat[rowloop,3]=(if(dloop==0) "d" else "")
freeparsmat[rowloop,4]=(if(iloop==0) "i" else "")
if(dloop==1) fixedvalsmat[rowloop,3]=1-1e-8
if(iloop==1) fixedvalsmat[rowloop,4]=.0001
if(iloop==2) fixedvalsmat[rowloop,4]=1
if(rloop==1) fixedvalsmat[rowloop,1]=1
if(ploop==1) pequalsrmat[rowloop,1]=1
}
parnames=apply(freeparsmat,1,paste,collapse="")
modnames=parnames
modnames[freeparsmat[,"i"]==""]=paste(modnames[freeparsmat[,"i"]==""], round(fixedvalsmat[freeparsmat[,"i"]=="","i"],1),sep="")
pequalsrmat
setmod <- optim(temppars, vattG2overarchfun, tempparbounds=parbounds,freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="Nelder-Mead")
lengthvec=128-rowSums(rawdatamat[,1:128]==0)
lengthvec
subj <- 1
curlength=lengthvec[subj]
lengthvec=128-rowSums(rawdatamat[,1:128]==0)
lengthvec
curlength=lengthvec[subj]
curchoices=data.frame(rawdatamat[subj,1:curlength])
curchoices
setmod <- optim(temppars, vattG2overarchfun, tempparbounds=parbounds,freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="Nelder-Mead")
curmod <- 5
setmod <- optim(temppars, vattG2overarchfun, tempparbounds=parbounds,freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="Nelder-Mead")
curreinf=data.frame(rawdatamat[cursubj,129:(128+curlength)])
curreinf=data.frame(rawdatamat[subj,129:(128+curlength)])
curreinf=data.frame(rawdatamat[subj,129:(128+curlength)])
setmod <- optim(temppars, vattG2overarchfun, tempparbounds=parbounds,freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="Nelder-Mead")
curmod <- 5
curmod <- 5
setmod <- optim(temppars, vattG2overarchfun, tempparbounds=parbounds,freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="Nelder-Mead")
setmod
parbounds
parbounds
contractpars=function(spars) (ub-lb)/(exp(-spars)+1)+lb
contractpars(setmod$par)
?optim
source("probability.R")
setmod <- optim(temppars, vattG2overarchfun, tempparbounds=parbounds,freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="L-BFGS-B")
setmod <- optim(temppars, fn=vattG2overarchfun, tempparbounds=parbounds,freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="L-BFGS-B")
temppars
parbounds
source("probability.R")
freeparsmat[5,]
fixedvalsmat[5,]
vattG2overarchfun(temppars, freeletters = freeparsmat[5,], fixedvals = fixedvalsmat[5,], pequalsr=pequalsrmat[5,], tempchoices=curchoices, tempreinf=curreinf, predfun=vattpredpfun9, method="L-BFGS-B")
vattG2overarchfun(temppars, freeletters = freeparsmat[5,], fixedvals = fixedvalsmat[5,], pequalsr=pequalsrmat[5,], tempchoices=curchoices, tempreinf=curreinf, predpfun=vattpredpfun9, method="L-BFGS-B")
vattG2overarchfun(temppars, method="L-BFGS-B", fn=vattG2overarchfun, freeletters = freeparsmat[5,], fixedvals = fixedvalsmat[5,], pequalsr=pequalsrmat[5,], tempchoices=curchoices, tempreinf=curreinf, predpfun=vattpredpfun9)
vattG2overarchfun(temppars, freeletters = freeparsmat[5,], fixedvals = fixedvalsmat[5,], pequalsr=pequalsrmat[5,], tempchoices=curchoices, tempreinf=curreinf, predpfun=vattpredpfun9)
setmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,method="L-BFGS-B")
curmod
vattG2overarchfun(temppars, freeletters = freeparsmat[5,], fixedvals = fixedvalsmat[5,], pequalsr=pequalsrmat[5,], tempchoices=curchoices, tempreinf=curreinf, predpfun=vattpredpfun9)
setmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
setmod
maxiter
temppars <- runif(4)*ub
for (subj in 1:maxsubj){
twoLLstack <- array(NA, c(maxsubj, 1, 1))
parstack <- array(NA, c(maxsubj, 4, 1))
temppars <- runif(4)*ub
lengthvec=128-rowSums(rawdatamat[,1:128]==0)
curlength=lengthvec[subj]
curmod <- 5
curchoices=data.frame(rawdatamat[subj,1:curlength])
curreinf=data.frame(rawdatamat[subj,129:(128+curlength)])
temppars <- runif(4)*ub
setmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
for (iter in 1:maxiter){
temppars <- runif(4)*ub
tempmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
if (curmod$value < setmod$value){
setmod <- tempmod
}
twoLLstack[subj,,] <- setmod$value
parstack[subj,,] <- setmod$par
}
}
setmod
twoLLstack
curmod
for (subj in 1:maxsubj){
twoLLstack <- array(NA, c(maxsubj, 1, 1))
parstack <- array(NA, c(maxsubj, 4, 1))
temppars <- runif(4)*ub
lengthvec=128-rowSums(rawdatamat[,1:128]==0)
curlength=lengthvec[subj]
curmod <- 5
curchoices=data.frame(rawdatamat[subj,1:curlength])
curreinf=data.frame(rawdatamat[subj,129:(128+curlength)])
temppars <- runif(4)*ub
setmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
for (iter in 1:maxiter){
temppars <- runif(4)*ub
tempmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
if (tempmod$value < setmod$value){
setmod <- tempmod
}
twoLLstack[subj,,] <- setmod$value
parstack[subj,,] <- setmod$par
}
}
twoLLstack
parstack
twoLLstac[3]
twoLLstack[3,,]
twoLLstack[1,,]
maxsubj
subj
twoLLstack <- array(NA, c(maxsubj, 1, 1))
parstack <- array(NA, c(maxsubj, 4, 1))
for (subj in 1:maxsubj){
temppars <- runif(4)*ub
lengthvec=128-rowSums(rawdatamat[,1:128]==0)
curlength=lengthvec[subj]
curmod <- 5
curchoices=data.frame(rawdatamat[subj,1:curlength])
curreinf=data.frame(rawdatamat[subj,129:(128+curlength)])
temppars <- runif(4)*ub
setmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
for (iter in 1:maxiter){
temppars <- runif(4)*ub
tempmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
if (tempmod$value < setmod$value){
setmod <- tempmod
}
twoLLstack[subj,,] <- setmod$value
parstack[subj,,] <- setmod$par
}
}
curchoices
lengthvec
tempmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
setmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
temppars
lb
up
un
ub
fixedvals
fixedvalsmat
fixedvalsmat[5,4]
curreinf
curchoices
length(curreinf)
length(curchoices)
vattG2overarchfun(temppars, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9)
tempmod <- optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, lower=lb, upper=ub, method="L-BFGS-B")
tempmod
optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,lower=lb, upper=ub, method="L-BFGS-B")
vattG2overarchfun(temppars, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9)
temppars <- runif(4)*ub
vattG2overarchfun(temppars, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9)
optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,lower=lb, upper=ub, method="L-BFGS-B")
source("probability.R")
optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,lower=lb, upper=ub, method="L-BFGS-B")
optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9,lower=lb, upper=ub, method="Nelder-Mead")
optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, method="Nelder-Mead")
optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, method="Nelder-Mead")$value
contract(optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, method="Nelder-Mead")$par)
contractpars(optim(temppars, vattG2overarchfun, freeletters=freeparsmat[curmod,],fixedvals=fixedvalsmat[curmod,],pequalsr=pequalsrmat[curmod,],
tempchoices=curchoices,tempreinf=curreinf,predpfun=vattpredpfun9, method="Nelder-Mead")$par)
