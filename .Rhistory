data
##
empty <- matrix(NA, nrow=2*88, ncol=130)
empty[,129] <- rep(data$subjID, each=2)
empty[,130] <- rep(data$group, each=2) #1 control, 2 SDI
empty
for(j in 1:88) empty[2*j-1,1:128] <- as.numeric(data[j,1:128])
for(j in 1:88) empty[2*j,1:128] <- as.numeric(data[j,129:256])
t <- c()
for(i in 1:88) {
t <- rbind(t,  t(empty[(2*i-1):(2*i),]))
}
subjID <- c()
group <- c()
for(i in 1:88){
subjID <- c(subjID,rep(t[130*i-1,1], each=130))
group <-c(group, rep(t[130*i,1], each=130))
}
data <- cbind(t,subjID,group)
data
head(data)
trial <- c()
rep(1:128, 88)
data <- cbind(t,subjID,group, trial)
data
trial <- rep(1:128, 88)
data <- cbind(t,subjID,group, trial)
trial
data
t
nrow(t)
length(Trial)
length(trial)
11440/88
trial <- rep(1:130, 88)
data <- cbind(t,subjID,group, trial)
data
loc <- c()
for(i in 1:88) loc <- c(loc, 130*i-1, 130*i)
data <- data[-loc,]
loc <- which(data[,1]==0)
data[-loc,]
data <- data[-loc,]
data
data <- as.data.frame(data)
colnames(data)
data <- rename(data, subjID=subjID, group=group,trial=trial, deck=V1, outcome=V2)
head(data)
data <- rename(data, deck=V1, outcome=V2)
data <- select(subjID, group, trial, deck, outcome)
data <- select(data, subjID, group, trial, deck, outcome)
head(data)
rm(list=ls())
data <- read.table("managed sample data.txt")
library(dplyr)
head(Data)
head(data)
data <- rename(data, subjID=V257, group=V258)
empty <- matrix(NA, nrow=2*88, ncol=130)
empty[,129] <- rep(data$subjID, each=2)
empty[,130] <- rep(data$group, each=2) #1 control, 2 SDI
head(empty)
#Seperate deck choice and outcome
for(j in 1:88){
empty[2*j-1,1:128] <- as.numeric(data[j,1:128])
empty[2*j,1:128] <- as.numeric(data[j,129:256])
}
head(empty)
t <- c()
for(i in 1:88) {
t <- rbind(t,  t(empty[(2*i-1):(2*i),]))
}
head(t)
head(empty)
head(t)
t
#Insert subjID and group index
empty <- matrix(NA, nrow=2*88, ncol=128)
data <- read.table("managed sample data.txt")
data <- rename(data, subjID=V257, group=V258)
#Seperate deck choice and outcome
for(j in 1:88){
empty[2*j-1,1:128] <- as.numeric(data[j,1:128])
empty[2*j,1:128] <- as.numeric(data[j,129:256])
}
head(empty)
#Transpose and row-bind trials
t <- c()
for(i in 1:88) {
t <- rbind(t,  t(empty[(2*i-1):(2*i),]))
}
#
subjID <- c()
group <- c()
data$subjID
rep(data$subjID, each=10)
subjID <- rep(data$subjID, each=128)
group <- rep(data$group, each=128)
group
trial <- rep(1:128, 88)
data.frame(t,subjID,group, trial)
data <- data.frame(t,subjID,group, trial)
#Remove empty trials
loc <- which(data[,1]==0)
loc
data <- data[-loc,]
data
data <-
data %>% rename(data, deck=V1, outcome=V2)
data %>% rename(data, deck=V1, outcome=V2)
data %>% rename(deck=V1, outcome=V2)
head(data)
data %>% rename(deck=X1, outcome=X2)
data %>% rename(deck=X1, outcome=X2) %>% select(subjID, group, trial, deck, outcome)
data %>% rename(deck=X1, outcome=X2) %>% select(subjID, group, trial, deck, outcome) %>% arrange(subjID) %>% head(10)
data <- data %>% rename(deck=X1, outcome=X2) %>% select(subjID, group, trial, deck, outcome) %>% arrange(subjID)
head(data)
?save
?write
write(data, file="reorganized data.txt")
write(data, file="reorganized data.txt", sep="\n")
write.table(data, file="reorganized data.txt")
read.table("reorganized data.txt")
library(knitr)
library(kableExtra)
load("Code17b_choice_s1-88_iter100.Rdata")
#SDI 1:39, control 40:88
##Table.3
dat_sdi <- parstack[1:39,1:3,5]
dat_control <- parstack[40:88,1:3,5]
mean_s <- apply(dat_sdi,2,mean)
mean_c <- apply(dat_control,2,mean)
median_s <- apply(dat_sdi,2,median)
median_c <- apply(dat_control,2, median)
sd_s <- apply(dat_sdi, 2, sd)
sd_c <- apply(dat_control, 2, sd)
t3 <- rbind(mean_c,mean_s,median_c,median_s,sd_c,sd_s)
t3 <- as.data.frame(t3)
kable(t3, format = "html", caption = "Original Code", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2) %>%
group_rows("Median", 3,4) %>%
group_rows("Standard deviation", 5,6)
load("DY_MLE.Rdata")
#Control 1:49, SDI 50:88
##Table.3
dat_control <- parstack[1:49,1:3,5]
dat_sdi <- parstack[50:88,1:3,5]
mean_s <- apply(dat_sdi,2,mean)
mean_c <- apply(dat_control,2,mean)
median_s <- apply(dat_sdi,2,median)
median_c <- apply(dat_control,2, median)
sd_s <- apply(dat_sdi, 2, sd)
sd_c <- apply(dat_control, 2, sd)
t3 <- rbind(mean_c,mean_s,median_c,median_s,sd_c,sd_s)
t3 <- as.data.frame(t3)
kable(t3, format = "html", caption = "DY Code", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2) %>%
group_rows("Median", 3,4) %>%
group_rows("Standard deviation", 5,6)
load("constrained.RData")
mean_par
median_par
sd_par
rbind(mean_par, median_par, sd_par)
t3 <- rbind(mean_par, median_par, sd_par) #duplicated rownames
t3 <- as.data.frame(t3)
kable(t3, format = "html", caption = "Constrained Code", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2) %>%
group_rows("Median", 3,4) %>%
group_rows("Standard deviation", 5,6)
t3
t3 <- rbind(mean_par, median_par, sd_par) #duplicated rownames
t3 <- as.data.frame(t3)
t3
t3 <- rbind(mean_par, median_par, sd_par) #duplicated rownames
t3
rownames(t3)
rownames(t3) <- c("mean_c","mean_s","median_c","median_s","sd_c","sd_s")
t3
t3 <- as.data.frame(t3)
kable(t3, format = "html", caption = "Constrained Code", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2) %>%
group_rows("Median", 3,4) %>%
group_rows("Standard deviation", 5,6)
<<<<<<< HEAD
rm(list=ls())  # remove all variables
# read the data file
dat = read.table("reorganized data.txt", header=T)
head(Data)
head(dat)
allSubjs = unique(dat$subjID)  # all subject IDs
allSubjs
N = length(allSubjs)      # number of subjects
T = table(dat$subjID)[1]  # number of trials per subject (=140)
T
table(dat$subjID)
table(dat$subjID) -> T
T
class(T)
T[1]
T[2]
dat
subset(dat,subjID==1)
subset(dat,subjID==1) -> tmp_data
dim(tmp_data)
T
T <- T[1]
T
subjattmat=matrix(nrow=3,ncol=T)
predpmat=matrix(-1,nrow=4, ncol=T)
subjattmat
subjattmat[,1]=curatt
curatt=rep((1/3),3)
subjattmat[,1]=curatt
predict(predpmat)
predpmat
=======
t3
##Table.3
t3 <- rbind(mean_par, median_par, sd_par)
t3 <- as.data.frame(t3)
kable(t3)
t3
load("constrained.RData")
load("constrained.RData")
mean_par
rownames(t3) <- c("mean_c","mean_s","median_c","median_s","sd_c","sd_s")
##Table.3
t3 <- rbind(mean_par, median_par, sd_par) #duplicated rownames
rownames(t3) <- c("mean_c","mean_s","median_c","median_s","sd_c","sd_s")
t3
kable(t3, format = "html", caption = "Constrained Code", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2) %>%
group_rows("Median", 3,4) %>%
group_rows("Standard deviation", 5,6)
library(knitr)
library(kableExtra)
kable(t3, format = "html", caption = "Constrained Code", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2) %>%
group_rows("Median", 3,4) %>%
group_rows("Standard deviation", 5,6)
kable(t3)
colnames(t3) <- c("r","p","d")
kable(t3, format = "html", caption = "Constrained Code", align="l") %>%
kable_styling(bootstrap_options = "striped",
full_width = F) %>%
add_header_above(c("Group"=1, "Parameters" = 3)) %>%
group_rows("Mean", 1,2) %>%
group_rows("Median", 3,4) %>%
group_rows("Standard deviation", 5,6)
rawdatamat[1:2,]
parstack
apply(parstack[40:88],2,sd)
apply(parstack[40:88,],2,sd)
apply(parstack[40:88,,],2,sd)
load("DY_MLE.RData")
rawdatamat[1:2,]
table(rawdatamat$V258)
sd_par
load("constrained.RData")
sd_par
mean_par
median_par
parstack
parstack[,3]
parstack[,3,]
plot(parstack[,3,])
rawdatamat[1:2,]
plot(parstack[1:40,3,])
par(mfrow=c(1,2))
plot(parstack[1:40,3,])
dev.off()
par(mfrow=c(1,2))
plot(parstack[1:39,3,])
plot(parstack[40:88,3,])
his(parstack[1:39,3,])
hist(parstack[1:39,3,])
hist(parstack[40:88,3,])
par(mfrow=c(2,2))
hist(parstack[1:39,3,])
hist(parstack[40:88,3,])
load("DY_MLE.RData")
head(r_par)
dev.off()
hist(parstack[1:49,3,])
par(mfrow=c(2,2))
hist(parstack[1:49,3,])
hist(parstack[50:88,3,])
load("constrained.RData")
parstack[1:49,3,]
hist(parstack[1:49,3,])
hist(parstack[50:88,3,])
load("C:/Users/desk1/Desktop/WCST-master/Code17b_choice_s1-88_iter100.Rdata")
parfinalmat
load("C:/Users/desk1/Desktop/WCST-master/rpd1_Code17b_choice_s1-88_iter100.Rdata")
parstack
parfinalmat
parfinalmat[,4]
rawdatamat[1:2,]
par(mfrow=c(2,1))
table(rawdatamat$V258)
hist(parfinalmat[40:88,4])
hist(parfinalmat[1:39,4])
par(mfrow=c(1,2))
hist(parfinalmat[40:88,4])
hist(parfinalmat[1:39,4])
load("constrained.R")
load("constrained.RData")
cons_s <- parstack[1:49,3,]
cons_c <- parstack[1:49,3,]
cons_s <- parstack[50:88,3,]
load("DY_MLE.RData")
head(r_par)
dy_c <- r_par[1:49,3]
dy_s <- r_par[50:88,3]
par(mfcol=c(1,2))
hist(cons_s)
hist(dy_s)
par(mfcol=c(1,2))
hist(cons_s, breaks=10)
hist(dy_s, breaks=10)
sd(cons_s)
sd(dy_s)
plot(cons_s)
plot(dy_s)
which(cons_s>4)
dy_s[which(cons_s>4)]
load("C:/Users/desk1/Desktop/WCST-master/rpd1_Code17b_choice_s1-88_iter100.Rdata")
org_c <- parstack[40:88,3,5]
org_c
org_s <- parstack[1:39,3,5]
head(parstack)
head(parstack[,,5])
cbind(org_s,dy_s,cons_s)
plot(org_s-dy_s)
plot(org_s-cons_s)
BIC_rpd1
>>>>>>> master
# read the data file
dat = read.table("reorganized data.txt", header=T)
rm(list=ls())
# read the data file
dat = read.table("reorganized data.txt", header=T)
allSubjs = unique(dat$subjID)  # all subject IDs
N = length(allSubjs)      # number of subjects
T = table(dat$subjID)     # number of trials per subject
numIter = 100             # number of iterations to find global minimum values
numPars = 3               # number of parameters
subset(dat, subjID==1) -> tmp_data
T = nrow(tmp_data)  # number of trials
T
subjattmat=matrix(nrow=3,ncol=T) #subject attention to 3 dimensions
predpmat=matrix(-1,nrow=4, ncol=T) #probability of choosing each deck(4 choices)
subjattmat
#Creating 3*4*128 answer sheet from "correctdeck matrix"
correctdeckmat=read.table("correctdeck matrix.txt",header=1)
matchstack=array(rep(0,(3*4*128)),dim=c(3,4,128))
for (i in 1:4) matchstack[,i,] <- array(as.numeric(correctdeckmat[,]==i),dim=c(3,128))
correctdeckmat
dim(correctdeckmat)
dim(subjattmat)
correctdeckmat[,1]
correctdeckmat[,1:2]
tmp_data
correctdeckmat
correctdeckmat[,1:10]
correctdeckmat[,1:5]==tmp_data$deck[1:%]
correctdeckmat[,1:5]==tmp_data$deck[1:5]
tmp_data$deck[t1:%]
tmp_data$deck[1:5]
correctdeckmat[,1:5]
correctdeckmat[,1:5]==tmp_data$deck[1:5]
correctdeckmat[,1]==tmp_data$deck[1]
correctdeckmat[,1:2]==tmp_data$deck[1:2]
correctdeckmat[,3]==tmp_data$deck[3]
correctdeckmat[,4]==tmp_data$deck[4]
correctdeckmat[,4]==tmp_data$deck[4]
correctdeckmat[,4]==tmp_data$deck[4] -> a
curatt
curatt=rep((1/3),3)
a*curatt
a*curatt/sum(a*curatt)
(1-a)*curatt/sum((1-a)*curatt)
a*curatt/sum(a*curatt) -> b
b
curatt
0.5*curatt+0.5*b
curatt
matchstack[,,1]
curatt%*%matchstack[,,1]
r <- 1
p <- 1
d <- 1
curatt=rep((1/3),3)
subjattmat=matrix(nrow=3,ncol=T) #subject attention to 3 dimensions
predpmat=matrix(-1,nrow=4, ncol=T) #probability of choosing each deck(4 choices)
subjattmat[,1] <- curatt
predpmat[,1] <- t(curatt%*%matchstack[,,1])
for (t in 1:(T-1))
{
attmatchchoice=correctdeckmat[,t]== tmp_data$deck[t] #for each choice, indicate which dimension matches the choice
curatt <- curatt*.9999997+.0000001 #rescale to prevent rounding errors
if(tmp_data$outcome[t]==1)
{
attsignal <- powerrize(1,(attmatchchoice*curatt))
curatt <- (1-r)*curatt+r*attsignal
} else
{
attsignal <- powerrize(1,((1-attmatchchoice)*curatt))
curatt <- (1-p)*curatt+p*attsignal
}
subjattmat[,t+1] <- curatt
predpmat[,t+1]=t(powerrize(d,curatt)%*%matchstack[,,t+1])
}
#Powerrize function
powerrize=function(pow,tempvec) (tempvec^pow)/sum(tempvec^pow)
subjattmat=matrix(nrow=3,ncol=T) #subject attention to 3 dimensions
predpmat=matrix(-1,nrow=4, ncol=T) #probability of choosing each deck(4 choices)
subjattmat[,1] <- curatt
predpmat[,1] <- t(curatt%*%matchstack[,,1])
for (t in 1:(T-1))
{
attmatchchoice=correctdeckmat[,t]== tmp_data$deck[t] #for each choice, indicate which dimension matches the choice
curatt <- curatt*.9999997+.0000001 #rescale to prevent rounding errors
if(tmp_data$outcome[t]==1)
{
attsignal <- powerrize(1,(attmatchchoice*curatt))
curatt <- (1-r)*curatt+r*attsignal
} else
{
attsignal <- powerrize(1,((1-attmatchchoice)*curatt))
curatt <- (1-p)*curatt+p*attsignal
}
subjattmat[,t+1] <- curatt
predpmat[,t+1]=t(powerrize(d,curatt)%*%matchstack[,,t+1])
}
subjattmat
predpmat
tempchoices <- tmp_data$deck
matrix(c(tempchoices==1,tempchoices==2,tempchoices==3,tempchoices==4),nrow=4,ncol=templength,byrow=TRUE)
matrix(c(tempchoices==1,tempchoices==2,tempchoices==3,tempchoices==4),nrow=4,ncol=T,byrow=TRUE)
predpmat
tempchoices
tmp_data$outcome[1]
tmp_data$deck[1]
predpmat[tmp_data$deck[1],1]
predpmat[tmp_data$deck[2],2]
T
choiceprob <- c()
for(i in 1:T){
choiceprob <- c(choiceprob, predpmat[tmp_data$deck[i],i])
}
choiceprob
choiceprob[-1]
subjattmat
# parameter bounds
param_low <- c(0, 0, 0); param_up <- c(1, 1, 5);  # lower and upper bounds of r, p, d
numIter=5
# randomly generate initial values for numIter iterations.
# param_initial --> a matrix with numIter*3 dimension. Use this for all subjects.
param_initial = cbind(runif(numIter)*param_up[1], runif(numIter)*param_up[2], runif(numIter)*param_up[3])
param_initial
?runif
N
allSubjs
param_initial
tmp_data
unique(tmp_data$group)
as.character(unique(tmp_data$group))
rawdatamat
colnames(rawdatamat$V257)
rawdatamat$V257
colnames(rawdatamat)
colnames(rawdatamat)[257]
colnames(rawdatamat)[257] <- "SUB"
colnames(rawdatamat)
rm(list=ls())
data <- read.table("managed sample data.txt")
data <- read.table("managed sample data.txt")
colnames(data)[c(257, 258)] <-  c("subjID", "group")
colnames(Data)
colnames(data)
nrow(data)
library(dplyr)
data <- rename(data, subjID=V257, group=V258)
data <- read.table("managed sample data.txt")
data <- rename(data, subjID=V257, group=V258)
colnames(data)
rm(list=ls())
# read the data file
dat = read.table("reorganized data.txt", header=T)
allSubjs = unique(dat$subjID)  # all subject IDs
#Creating 3*4*128 answer sheet from "correctdeck matrix"
correctdeckmat=read.table("correctdeck matrix.txt",header=1)
